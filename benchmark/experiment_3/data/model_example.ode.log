┌ Debug: find_reductions of 
│   system =
│    Ap'(t) = -3*Ap(t)*B(t) - Ap(t)*r2(t) + 4*ApB(t) + Au(t)*r1(t)
│    r1'(t) = 0
│    ApB'(t) = 3*Ap(t)*B(t) - 4*ApB(t)
│    Au'(t) = Ap(t)*r2(t) - 3*Au(t)*B(t) - Au(t)*r1(t) + 4*AuB(t)
│    r2'(t) = 0
│    AuB'(t) = 3*Au(t)*B(t) - 4*AuB(t)
│    B'(t) = -3*Ap(t)*B(t) + 4*ApB(t) - 3*Au(t)*B(t) + 4*AuB(t)
│    
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:209
[ Info: constructed a set of 6 matrices 7×7 from the system Jacobian
[ Info: Called invariant_subspace_global on 6 matrices of shape (7, 7)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 17
┌ Debug: Dimension of the algebra is 17
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
[ Info: Computing the radical..
[ Info: computed the radical of dimension 12
[ Info: Found radical of size 12
[ Info: Radical is nontrivial, computing the general kernel of radical
[ Info: 4 dimensional subspace found
[ Info: found 4-dim subspace in ambient 7-dim
[ Info: Calling myself recursively in restricted subspace
┌ Debug: Get to a 4 -dimensional space with zero action
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:124
[ Info: Calling myself recursively in complemented subspace
[ Info: Called invariant_subspace_global on 6 matrices of shape (3, 3)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 7
┌ Debug: Dimension of the algebra is 7
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
[ Info: Computing the radical..
[ Info: computed the radical of dimension 2
[ Info: Found radical of size 2
[ Info: Radical is nontrivial, computing the general kernel of radical
[ Info: 1 dimensional subspace found
[ Info: found 1-dim subspace in ambient 3-dim
[ Info: Calling myself recursively in complemented subspace
[ Info: Called invariant_subspace_global on 6 matrices of shape (2, 2)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 4
┌ Debug: Dimension of the algebra is 4
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
┌ Debug: Before positivization: BigInt[1 0 1 0 -1 0 0; 0 1 0 1 1 0 0; 0 0 0 0 0 1 0; 0 0 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 1 1 1 0 0 0; 0 1 0 1 1 0 0; 0 0 0 0 0 1 0; 0 0 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[1 0 1 0 -1 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: DimensionMismatch("No suitable matrix found")
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:41
┌ Debug: Before positivization: BigInt[1 0 1 0 -1 0 0; 0 1 0 1 1 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 1 1 1 0 0 0; 0 1 0 1 1 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[1 0 1 0 -1 0 0; 0 1 0 1 1 0 0; 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 1 1 1 0 0 0; 0 1 0 1 1 0 0; 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[1 0 1 0 0 0 0; 0 1 0 1 0 0 0; 0 0 0 0 1 0 0; 0 0 0 0 0 1 0; 0 0 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 0 1 0 0 0 0; 0 1 0 1 0 0 0; 0 0 0 0 1 0 0; 0 0 0 0 0 1 0; 0 0 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Found reductions
│   result =
│    5-element Vector{Dict{Symbol, Vector{fmpq_mpoly}}}:
│     Dict(:new_system => [0], :new_vars => [Ap + Au - B])
│     Dict(:new_system => [0, 0], :new_vars => [Ap + ApB + Au + AuB, ApB + AuB + B])
│     Dict(:new_system => [0, 0, 0], :new_vars => [Ap + ApB + Au + AuB, ApB + AuB + B, r1])
│     Dict(:new_system => [0, 0, 0, 0], :new_vars => [Ap + ApB + Au + AuB, ApB + AuB + B, r1, r2])
│     Dict(:new_system => [-3*y1*y3 + 4*y2, 3*y1*y3 - 4*y2, -3*y1*y3 + 4*y2, 0, 0], :new_vars => [Ap + Au, ApB + AuB, B, r1, r2])
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:229
