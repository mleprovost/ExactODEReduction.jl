┌ Debug: find_reductions of 
│   system =
│    s1'(t) = -83//1000*s1(t) + 1//20*s2(t) + 24//25*s6(t)
│    s6'(t) = 0
│    s2'(t) = 1//20*s1(t) - 3//50*s2(t)
│    s3'(t) = 1//100*s2(t) - 1//100*s3(t)
│    s8'(t) = 33//1000*s1(t)
│    s4'(t) = 1//100*s3(t) - 1//200*s4(t)
│    s5'(t) = 1//200*s4(t)
│    
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:209
[ Info: constructed a set of 1 matrices 7×7 from the system Jacobian
[ Info: Called invariant_subspace_global on 1 matrices of shape (7, 7)
┌ Debug: Found an invariant subspace by saturating the first unit vector
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:18
[ Info: found 3-dim subspace in ambient 7-dim
[ Info: Calling myself recursively in restricted subspace
[ Info: Called invariant_subspace_global on 1 matrices of shape (3, 3)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 2
┌ Debug: Dimension of the algebra is 2
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
[ Info: Computing the radical..
[ Info: Found radical of size 0
[ Info: Radical is trivial, using randomized algorithm
┌ Debug: !!Inside invariant_subspace_semisimple
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/radical.jl:220
┌ Debug: Eval in invariant_subspace_semisimple
│   factored =
│    |0	0	0|
│    |0	0	0|
│    |33120//31	27600//31	46|
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/radical.jl:267
┌ Debug: V in invariant_subspace_semisimple
│   V =
│    2-element Vector{Main.ExactODEReduction.Sparsik{FlintRationalField}}:
│     (-5//6, 1, 0)
│     (-31//720, 0, 1)
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/radical.jl:276
[ Info: 2 dimensional subspace found
[ Info: found 2-dim subspace in ambient 3-dim
[ Info: Calling myself recursively in restricted subspace
[ Info: Called invariant_subspace_global on 1 matrices of shape (2, 2)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 2
┌ Debug: Dimension of the algebra is 2
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
[ Info: Computing the radical..
[ Info: Found radical of size 0
[ Info: Radical is trivial, using randomized algorithm
┌ Debug: !!Inside invariant_subspace_semisimple
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/radical.jl:220
┌ Warning: No invariant subspaces defined over Q
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/radical.jl:244
┌ Warning: There is invariant subspace but it is either not defined over Q
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:60
[ Info: Calling myself recursively in complemented subspace
[ Info: Called invariant_subspace_global on 1 matrices of shape (4, 4)
┌ Debug: Found an invariant subspace by saturating the first unit vector
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:18
[ Info: found 1-dim subspace in ambient 4-dim
[ Info: Calling myself recursively in complemented subspace
[ Info: Called invariant_subspace_global on 1 matrices of shape (3, 3)
┌ Debug: Found an invariant subspace by saturating the first unit vector
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:18
[ Info: found 1-dim subspace in ambient 3-dim
[ Info: Calling myself recursively in complemented subspace
┌ Debug: Get to a 2 -dimensional space with zero action
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:124
┌ Debug: Before positivization: BigInt[1 0 0 0 0 0 0; 0 1 0 0 0 0 0; 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 0 0 0 0 0 0; 0 1 0 0 0 0 0; 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[31 0 0 0 0 -720 0; 0 31 0 0 0 -600 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: DimensionMismatch("No suitable matrix found")
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:41
┌ Debug: Before positivization: BigInt[1 0 0 0 0 0 0; 0 1 0 0 0 0 0; 0 0 1 0 0 0 0; 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 0 0 0 0 0 0; 0 1 0 0 0 0 0; 0 0 1 0 0 0 0; 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[1 0 0 0 0 0 0; 0 1 0 0 0 0 0; 0 0 1 0 0 0 0; 0 0 0 1 0 0 0; 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 0 0 0 0 0 0; 0 1 0 0 0 0 0; 0 0 1 0 0 0 0; 0 0 0 1 0 0 0; 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[1 0 0 0 0 0 0; 0 1 0 0 0 0 0; 0 0 1 0 0 0 0; 0 0 0 1 0 0 0; 0 0 0 0 1 0 0; 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 0 0 0 0 0 0; 0 1 0 0 0 0 0; 0 0 1 0 0 0 0; 0 0 0 1 0 0 0; 0 0 0 0 1 0 0; 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Found reductions
│   result =
│    5-element Vector{Dict{Symbol, Vector{fmpq_mpoly}}}:
│     Dict(:new_system => [-83//1000*y1 + 1//20*y2, 1//20*y1 - 3//50*y2], :new_vars => [s1 - 720//31*s6, s2 - 600//31*s6])
│     Dict(:new_system => [-83//1000*y1 + 1//20*y2 + 24//25*y3, 1//20*y1 - 3//50*y2, 0], :new_vars => [s1, s2, s6])
│     Dict(:new_system => [-83//1000*y1 + 1//20*y2 + 24//25*y4, 1//20*y1 - 3//50*y2, 1//100*y2 - 1//100*y3, 0], :new_vars => [s1, s2, s3, s6])
│     Dict(:new_system => [-83//1000*y1 + 1//20*y2 + 24//25*y5, 1//20*y1 - 3//50*y2, 1//100*y2 - 1//100*y3, 1//100*y3 - 1//200*y4, 0], :new_vars => [s1, s2, s3, s4, s6])
│     Dict(:new_system => [-83//1000*y1 + 1//20*y2 + 24//25*y6, 1//20*y1 - 3//50*y2, 1//100*y2 - 1//100*y3, 1//100*y3 - 1//200*y4, 1//200*y4, 0], :new_vars => [s1, s2, s3, s4, s5, s6])
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:229
