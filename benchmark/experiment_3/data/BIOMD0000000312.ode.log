┌ Debug: find_reductions of 
│   system =
│    k4'(t) = 0
│    k3'(t) = 0
│    R'(t) = -R(t)*X(t)*k2(t) + S(t)*k1(t)
│    k2'(t) = 0
│    k1'(t) = 0
│    S'(t) = 0
│    SINK'(t) = -SINK(t)*k4(t)
│    X'(t) = S(t)*k3(t) + SINK(t)*k4(t)
│    
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:209
[ Info: constructed a set of 8 matrices 8×8 from the system Jacobian
[ Info: Called invariant_subspace_global on 8 matrices of shape (8, 8)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 12
┌ Debug: Dimension of the algebra is 12
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
[ Info: Computing the radical..
[ Info: computed the radical of dimension 10
[ Info: Found radical of size 10
[ Info: Radical is nontrivial, computing the general kernel of radical
[ Info: 5 dimensional subspace found
[ Info: found 5-dim subspace in ambient 8-dim
[ Info: Calling myself recursively in restricted subspace
┌ Debug: Get to a 5 -dimensional space with zero action
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:124
[ Info: Calling myself recursively in complemented subspace
[ Info: Called invariant_subspace_global on 8 matrices of shape (3, 3)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 4
┌ Debug: Dimension of the algebra is 4
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
[ Info: Computing the radical..
[ Info: computed the radical of dimension 2
[ Info: Found radical of size 2
[ Info: Radical is nontrivial, computing the general kernel of radical
[ Info: 2 dimensional subspace found
[ Info: found 2-dim subspace in ambient 3-dim
[ Info: Calling myself recursively in restricted subspace
[ Info: Called invariant_subspace_global on 8 matrices of shape (2, 2)
┌ Debug: Found an invariant subspace by saturating the first unit vector
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:18
[ Info: found 1-dim subspace in ambient 2-dim
┌ Debug: Before positivization: BigInt[0 1 0 0 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [0 1 0 0 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[0 1 0 0 0 0 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [0 1 0 0 0 0 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[0 1 0 0 0 0 0 0; 0 0 0 0 1 0 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [0 1 0 0 0 0 0 0; 0 0 0 0 1 0 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[0 1 0 0 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [0 1 0 0 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[0 1 0 0 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [0 1 0 0 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 0; 0 0 0 1 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 0; 0 0 0 1 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0; 0 0 0 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Found reductions
│   result =
│    7-element Vector{Dict{Symbol, Vector{fmpq_mpoly}}}:
│     Dict(:new_system => [0], :new_vars => [S])
│     Dict(:new_system => [0, 0], :new_vars => [S, k1])
│     Dict(:new_system => [0, 0, 0], :new_vars => [S, k1, k2])
│     Dict(:new_system => [0, 0, 0, 0], :new_vars => [S, k1, k2, k3])
│     Dict(:new_system => [0, 0, 0, 0, 0], :new_vars => [S, k1, k2, k3, k4])
│     Dict(:new_system => [0, -y2*y6, 0, 0, 0, 0], :new_vars => [S, SINK, k1, k2, k3, k4])
│     Dict(:new_system => [0, -y2*y7, y1*y6 + y2*y7, 0, 0, 0, 0], :new_vars => [S, SINK, X, k1, k2, k3, k4])
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:229
