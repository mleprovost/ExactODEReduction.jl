┌ Debug: find_reductions of 
│   system =
│    SINK'(t) = -10*IP3(t)
│    R'(t) = 5*HR(t)
│    EE'(t) = 4000*GQ(t)*HRRH(t)
│    IP3'(t) = 20000000*EE(t)
│    HRRH'(t) = 200*EE(t) + 5000*HR(t)
│    GQ'(t) = 200*EE(t)
│    H'(t) = 5*HR(t)
│    HR'(t) = 5//2*H(t)*R(t) + 10*HRRH(t)
│    
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:209
[ Info: constructed a set of 5 matrices 8×8 from the system Jacobian
[ Info: Called invariant_subspace_global on 5 matrices of shape (8, 8)
┌ Debug: Found an invariant subspace by saturating the first unit vector
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:18
[ Info: found 6-dim subspace in ambient 8-dim
[ Info: Calling myself recursively in restricted subspace
[ Info: Called invariant_subspace_global on 5 matrices of shape (6, 6)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 24
┌ Debug: Dimension of the algebra is 24
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
[ Info: Computing the radical..
[ Info: computed the radical of dimension 8
[ Info: Found radical of size 8
[ Info: Radical is nontrivial, computing the general kernel of radical
[ Info: 2 dimensional subspace found
[ Info: found 2-dim subspace in ambient 6-dim
[ Info: Calling myself recursively in restricted subspace
┌ Debug: Get to a 2 -dimensional space with zero action
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:124
[ Info: Calling myself recursively in complemented subspace
[ Info: Called invariant_subspace_global on 5 matrices of shape (4, 4)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 16
┌ Debug: Dimension of the algebra is 16
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
[ Info: Calling myself recursively in complemented subspace
[ Info: Called invariant_subspace_global on 5 matrices of shape (2, 2)
┌ Debug: Found an invariant subspace by saturating the first unit vector
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:18
[ Info: found 1-dim subspace in ambient 2-dim
┌ Debug: Before positivization: BigInt[1 0 0 0 0 0 0 0; 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 0; 0 0 0 1 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 0 0 0 0 0 0 0; 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 0; 0 0 0 1 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[0 1 0 0 -1 0 1000 0; 0 0 1 0 0 0 -1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: DimensionMismatch("No suitable matrix found")
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:41
┌ Debug: Before positivization: BigInt[0 1 0 0 -1 0 1000 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: DimensionMismatch("No suitable matrix found")
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:41
┌ Debug: Before positivization: BigInt[1 0 0 0 0 0 0 0; 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 0; 0 0 0 1 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 0 0 0 0 0 0 0; 0 1 0 0 0 0 0 0; 0 0 1 0 0 0 0 0; 0 0 0 1 0 0 0 0; 0 0 0 0 1 0 0 0; 0 0 0 0 0 1 0 0; 0 0 0 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Found reductions
│   result =
│    4-element Vector{Dict{Symbol, Vector{fmpq_mpoly}}}:
│     Dict(:new_system => [0], :new_vars => [GQ - HRRH + 1000*R])
│     Dict(:new_system => [0, 0], :new_vars => [GQ - HRRH + 1000*R, H - R])
│     Dict(:new_system => [4000*y2*y5, 200*y1, 5*y4, 5//2*y3*y6 + 10*y5, 200*y1 + 5000*y4, 5*y4], :new_vars => [EE, GQ, H, HR, HRRH, R])
│     Dict(:new_system => [4000*y2*y5, 200*y1, 5*y4, 5//2*y3*y7 + 10*y5, 200*y1 + 5000*y4, 20000000*y1, 5*y4], :new_vars => [EE, GQ, H, HR, HRRH, IP3, R])
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:229
