┌ Debug: find_reductions of 
│   system =
│    w'(t) = 27//50000*ez(t) + 1//250*z(t)
│    e'(t) = -1000*e(t)*z(t) + 3//4000*ez(t) + 1//250*z(t)
│    z'(t) = -1000*e(t)*z(t) + 21//100000*ez(t) - 1//250*z(t)
│    ez'(t) = 1000*e(t)*z(t) - 3//4000*ez(t)
│    
└ @ Main.ExactODEReduction ~/exactreduction/Exact-reduction-of-ODE-systems/src/ExactODEReduction.jl:209
[ Info: constructed a set of 3 matrices 4×4 from the system Jacobian
[ Info: Called invariant_subspace_global on 3 matrices of shape (4, 4)
┌ Debug: Found an invariant subspace by saturating the first unit vector
└ @ Main.ExactODEReduction ~/exactreduction/Exact-reduction-of-ODE-systems/src/linalg/invariants.jl:18
[ Info: found 3-dim subspace in ambient 4-dim
[ Info: Calling myself recursively in restricted subspace
[ Info: Called invariant_subspace_global on 3 matrices of shape (3, 3)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 9
┌ Debug: Dimension of the algebra is 9
└ @ Main.ExactODEReduction ~/exactreduction/Exact-reduction-of-ODE-systems/src/linalg/invariants.jl:25
┌ Debug: Before positivization: BigInt[1 0 0 0; 0 1 0 0; 0 0 0 1]
└ @ Main.ExactODEReduction ~/exactreduction/Exact-reduction-of-ODE-systems/src/positivizor.jl:36
┌ Debug: After positivization: [1 0 0 0; 0 1 0 0; 0 0 0 1]
└ @ Main.ExactODEReduction ~/exactreduction/Exact-reduction-of-ODE-systems/src/positivizor.jl:48
┌ Debug: Found reductions
│   result =
│    1-element Vector{Dict{Symbol, Vector{fmpq_mpoly}}}:
│     Dict(:new_system => [-1000*y1*y3 + 3//4000*y2 + 1//250*y3, 1000*y1*y3 - 3//4000*y2, -1000*y1*y3 + 21//100000*y2 - 1//250*y3], :new_vars => [e, ez, z])
└ @ Main.ExactODEReduction ~/exactreduction/Exact-reduction-of-ODE-systems/src/ExactODEReduction.jl:229
