┌ Debug: find_reductions of 
│   system =
│    P'(t) = E(t)*X(t) - K3(t)*P(t)
│    K3'(t) = 0
│    Q'(t) = K3(t)*P(t)
│    E'(t) = -E(t)*X(t) + K3(t)*P(t)
│    X'(t) = -E(t)*X(t)
│    
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:209
[ Info: constructed a set of 4 matrices 5×5 from the system Jacobian
[ Info: Called invariant_subspace_global on 4 matrices of shape (5, 5)
┌ Debug: Found an invariant subspace by saturating the first unit vector
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:18
[ Info: found 4-dim subspace in ambient 5-dim
[ Info: Calling myself recursively in restricted subspace
[ Info: Called invariant_subspace_global on 4 matrices of shape (4, 4)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 8
┌ Debug: Dimension of the algebra is 8
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
[ Info: Computing the radical..
[ Info: computed the radical of dimension 4
[ Info: Found radical of size 4
[ Info: Radical is nontrivial, computing the general kernel of radical
[ Info: 2 dimensional subspace found
[ Info: found 2-dim subspace in ambient 4-dim
[ Info: Calling myself recursively in restricted subspace
┌ Debug: Get to a 2 -dimensional space with zero action
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:124
[ Info: Calling myself recursively in complemented subspace
[ Info: Called invariant_subspace_global on 4 matrices of shape (2, 2)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 4
┌ Debug: Dimension of the algebra is 4
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
┌ Debug: Before positivization: BigInt[1 0 0 0 0; 0 1 0 0 0; 0 0 1 0 0; 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 0 0 0 0; 0 1 0 0 0; 0 0 1 0 0; 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[1 0 1 0 0; 0 1 0 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 0 1 0 0; 0 1 0 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[1 0 1 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [1 0 1 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Found reductions
│   result =
│    3-element Vector{Dict{Symbol, Vector{fmpq_mpoly}}}:
│     Dict(:new_system => [0], :new_vars => [E + P])
│     Dict(:new_system => [0, 0], :new_vars => [E + P, K3])
│     Dict(:new_system => [-y1*y4 + y2*y3, 0, y1*y4 - y2*y3, -y1*y4], :new_vars => [E, K3, P, X])
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:229
