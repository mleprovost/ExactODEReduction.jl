┌ Debug: find_reductions of 
│   system =
│    SS'(t) = I(t)*k1(t)
│    I'(t) = 0
│    k1'(t) = 0
│    ES'(t) = -I(t)*k1(t) + SS(t)*k2(t)
│    k2'(t) = 0
│    
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:209
[ Info: constructed a set of 4 matrices 5×5 from the system Jacobian
[ Info: Called invariant_subspace_global on 4 matrices of shape (5, 5)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 6
┌ Debug: Dimension of the algebra is 6
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
[ Info: Computing the radical..
[ Info: Found radical of size 6
[ Info: Radical is nontrivial, computing the general kernel of radical
[ Info: 3 dimensional subspace found
[ Info: found 3-dim subspace in ambient 5-dim
[ Info: Calling myself recursively in restricted subspace
┌ Debug: Get to a 3 -dimensional space with zero action
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:124
[ Info: Calling myself recursively in complemented subspace
[ Info: Called invariant_subspace_global on 4 matrices of shape (2, 2)
[ Info: generating a basis for Algebra using find_basis_1_β
[ Info: new reduction modulo, 2147483647
[ Info: generated a basis for Algebra of dimension 1
┌ Debug: Dimension of the algebra is 1
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/linalg/invariants.jl:25
[ Info: Computing the radical..
[ Info: Found radical of size 1
[ Info: Radical is nontrivial, computing the general kernel of radical
[ Info: 1 dimensional subspace found
[ Info: found 1-dim subspace in ambient 2-dim
┌ Debug: Before positivization: BigInt[0 1 0 0 0; 0 0 0 1 0; 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [0 1 0 0 0; 0 0 0 1 0; 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[0 1 0 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [0 1 0 0 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[0 1 0 0 0; 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [0 1 0 0 0; 0 0 0 1 0]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Before positivization: BigInt[0 1 0 0 0; 0 0 1 0 0; 0 0 0 1 0; 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:36
┌ Debug: After positivization: [0 1 0 0 0; 0 0 1 0 0; 0 0 0 1 0; 0 0 0 0 1]
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/positivizor.jl:48
┌ Debug: Found reductions
│   result =
│    4-element Vector{Dict{Symbol, Vector{fmpq_mpoly}}}:
│     Dict(:new_system => [0], :new_vars => [I])
│     Dict(:new_system => [0, 0], :new_vars => [I, k1])
│     Dict(:new_system => [0, 0, 0], :new_vars => [I, k1, k2])
│     Dict(:new_system => [0, y1*y3, 0, 0], :new_vars => [I, SS, k1, k2])
└ @ Main.ExactODEReduction ~/.julia/dev/ExactODEReduction/src/ExactODEReduction.jl:229
